=var load = getDevice("Load")
="Load device = " + load

// Basic test parameters
=var defaultTestCurrent = 1.0
=var defaultMinVoltage = 2.5
=var defaultStartVoltage = 3.7      // Default minimum start voltage
=var fastMeasureTime = 1     // 1 second for first 5 minutes
=var normalStepTime = 10     // 10 seconds for the remainder
=var initialPeriod = 300     // 5 minutes in seconds
=var maxTestTime = 150
=var capacity = 0
=var internalResistance = 0
=var temperature = 0
=var startTime = getCurrentTime()
=var defaultMaxTemp = 50     // Default maximum safe temperature
=var defaultMinTemp = 15     // Default minimum safe temperature

#popupInit "18650 Battery Test - Enhanced Settings"
#popupNumber "Discharge Current (A)" defaultTestCurrent 0.1 2.0 "Recommended: 0.5C-1C of nominal capacity"
#popupNumber "Minimum Voltage (V)" defaultMinVoltage 2.5 3.0 "Safety cutoff voltage (2.5V recommended)"
#popupNumber "Start Voltage (V)" defaultStartVoltage 3.5 4.2 0.1 "Minimum required start voltage"
#popupNumber "Maximum Test Time (Min)" maxTestTime 30 240 "Set according to capacity"
#popupNumber "Maximum Temperature (°C)" defaultMaxTemp 45 60 "Upper safety temperature limit (Default: " + defaultMaxTemp + "°C)"
#popupNumber "Minimum Temperature (°C)" defaultMinTemp 10 25 "Lower temperature limit (Default: " + defaultMinTemp + "°C)"
#popupButtons Start ok Abort
#popupShow

// Store selected values into working variables after popup
=var testCurrent = defaultTestCurrent
=var minVoltage = defaultMinVoltage
=var maxTemp = defaultMaxTemp
=var minTemp = defaultMinTemp

#if !ok
="Test aborted"
#return
#endif

=var startVoltage = readVoltage(load)
#if (startVoltage < defaultStartVoltage)
    ="ERROR: Battery voltage too low (" + startVoltage + "V)"
    ="The battery must be charged to at least " + defaultStartVoltage + "V before starting the test"
    ="Test aborted"
    #return
#endif

="Starting test..."
=setOn(load, 0)
#delay 0.5
=setVoltage(load, minVoltage)
#delay 0.5
=setCurrent(load, testCurrent)
#delay 0.5
="Start voltage: " + startVoltage + " V"
#log 1
#ChartCurves (load + ".Voltage") (load + ".Current")
=setOn(load, 1)
="Test running with " + testCurrent + " A"

=var maxTestTimeSeconds = (maxTestTime * 60)
=var elapsedTime = 0

#while ((readVoltage(load) > minVoltage) && (elapsedTime < maxTestTimeSeconds))
    =var current = readCurrent(load)
    =var voltage = readVoltage(load)
    =temperature = readTemperature(load)
    
    // Temperature safety checks
    #if (temperature > maxTemp)
        ="WARNING: Upper temperature limit reached: " + temperature + "°C"
        break
    #endif
    
    #if (temperature < minTemp)
        ="WARNING: Lower temperature limit reached: " + temperature + "°C"
        break
    #endif
    
    // Dynamic measurement interval
    =var currentStepTime = (elapsedTime < initialPeriod) ? fastMeasureTime : normalStepTime
    
    if (current > 0) {
        =internalResistance = (startVoltage - voltage) / current
    }
    
    if (current != null && current != undefined) {
        =capacity = capacity + (current * (currentStepTime / 3600))
        #log "Time,Voltage,Current,Temperature,Capacity" (elapsedTime/60) voltage current temperature capacity
    }
    
    #delay currentStepTime
    =elapsedTime = elapsedTime + currentStepTime
#endwhile

=reset(load)
=setCurrent(load, 0)
=setOn(load, 0)
#log 0
="Test completed"

if (capacity > 0) {
    ="Discharged capacity: " + formatSI((capacity * 1000), 1) + " mAh"
} else {
    ="ERROR: Discharged capacity is zero or negative"
}

="End voltage: " + readVoltage(load) + " V"
="Test duration: " + formatSI((elapsedTime / 60), 1) + " minutes"

if (internalResistance > 0) {
    ="Internal Resistance: " + formatSI(internalResistance * 1000, 3) + " mOhm"
} else {
    ="ERROR: Internal resistance is zero or negative"
}

#debug "Current read from device: " current
